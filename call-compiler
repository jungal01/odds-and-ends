#!/usr/bin/env bash

# this script centralizes the ability of the server
# to call compilers in the docker container.
# It accepts 2 inputs, the compiler and the filename,
# and allows for standard compiler calls, but doesn't
# allow for special compiler options.

compiler=$1
file=$2
object=${file%.*}

if [[ "$compiler" = "python" ]]; then
    python3 $file &> output.txt

elif [[ "$compiler" = "go" ]]; then
    gccgo $file -o cgo &> output.txt
    ./cgo &> output.txt

elif [[ "$compiler" = "fortran" ]]; then
    gfortran -std=f2008 $file -o cfortran &> output.txt
    ./cfortran &> output.txt

elif [[ "$compiler" = "rust" ]]; then
    # needs to be installed manually and add
    # .cargo/bin to PATH
    rustc $file -o crust &> output.txt
    ./crust &> output.txt

elif [[ "$compiler" = "java" ]]; then
    javac $file &> output.txt
    #temp=${object^}
    java ${object^} &> output.txt

elif [[ "$compiler" = "objc" ]]; then
    #this requires the packages gnustep and
    # gnustep-devel to be installed, and
    #`. /usr/share/GNUstep/Makefiles/GNUstep.sh`
    # to be added to .bashrc
    gcc `gnustep-config --objc-flags` -lgnustep-base $file -o cobjc &> output.txt
    ./cobjc &> output.txt

elif [[ "$compiler" = "ada" ]]; then
    gnat make $file &> output.txt
    ./"$object" &> output.txt

elif [[ "$compiler" = "cpp" ]]; then
    g++ -std=c++14 $file -o ccpp &> output.txt
    ./ccpp &> output.txt

elif [[ "$compiler" = "c" ]]; then
    #2>&1
    gcc -std=c11 $file -o cclang &> output.txt
    #./cclang &> output.txt

elif [[ "$compiler" = "ruby" ]]; then
    ruby $file &> output.txt

elif [[ "$compiler" = "js" ]]; then
    js $file &> output.txt

elif [[ "$compiler" = "lua" ]]; then
    lua5.3 $file &> output.txt

else
    echo "That compiler does not exist or is not available"
fi
